print("Question 1")
print("Problem based on tower of hanoi containing 3 Disks")
print("")
def Tower_of_hanoi(n,from_disk,to_disk,middle_disk):
	if n==0:
		return
	Tower_of_hanoi(n-1,from_disk,middle_disk,to_disk)
	print(f"Move Disk {n} from {from_disk} to {to_disk}")
	Tower_of_hanoi(n-1,middle_disk,to_disk,from_disk)

Tower_of_hanoi(3,'A','C','B')
print("")
print("End of question")



print("Question 2")
print("Pascal's Triangle using Recursion")

def func(n):
	for i in range(n+1):
		for j in range(n-i):
			print(' ',end='')
		a=1
		for j in range(1,i+1):
			print(a,' ' , sep='',end='')
			a=a*(i-j)//j
		print()

n=int(input("Enter number:"))
func(n)

print("Pascal's Triangle using iteration")
from math import factorial
n=int(input("Enter the number of rows :"))
for i in range(n):
	for j in range(n-i+1):
		print(' ',end='')
	for j in range(i+1):
		#nCr=n!/((n-r)!*r!)
		print(factorial(i)//(factorial(j)*factorial(i-j)),'',end='' )
	print()


print("Question 3")
num_1=int(input("Enter the value of num_1:"))
num_2=int(input("Enter the value of num_2:"))
quotient,remainder=divmod(num_1,num_2)

print("Part a):Checking if the quotient and remainder is a callable value or not")
print(callable(quotient))
print(callable(remainder))

print("Part b):Checking if value of quotient or remainder if zero")
if quotient==0:
	print("Value is zero")
if remainder==0:
	print("Value is zero")
if (quotient!=0 and remainder!=0):
	print("Values are non zero")


list_1=[]
list_1.append(quotient)
list_1.append(remainder)
print(list_1)

print("Part c):Filtering the list_1")
list_2=[]
list_3=[]
list_1.append(4)
list_1.append(5)
list_1.append(6)
list_filteredvalues=filter(lambda x:x>4,list_1)
filtered_values=tuple(list_filteredvalues)
print("Filtered Values:",filtered_values)


print("Part d):Conversion of list into set")
Set_1=set(list_1)
print("Set_1",Set_1)

print("Part e):Making set immutable")
immutable_set=frozenset(Set_1)
print("Immutable set:",immutable_set)

print("Part f):Calculaing Max value and hash value")
max_value=max(Set_1)
print("Max Value:",max_value)
hash_value=hash(immutable_set)
print("Hash Value:",hash_value)


print("Question 4")
class Student:
	def __init__(self,name,roll_number):
		self.name=name
		self.roll_number=roll_number
	def __del__(self):
		print("Object is Destroyed")

#Creation of an Object
Student_1=Student("Manav Goyal",21105107)
print("Object is created")
print(f"The name of student is {Student_1.name} and roll number is {Student_1.roll_number}")
del Student_1


print("Question5")
class Employee:
	def __init__(self,name,salary):
		self.name=name
		self.salary=salary
	def myfunc():
		print("Employee Name:",self.name)
		print("Employee Salary:",self.salary)

#Creating an Object
Employee_1=Employee("Mehak",40000)
Employee_2=Employee("Ashok",50000)
Employee_3=Employee("Viren",60000)
Employee_1.salary=70000
print(f"The updated salary of {Employee_1.name} is {Employee_1.salary}")
del Employee_3
print("The records of Viren are deleted")


print("Question 6")
word=input("Enter any word:")
word=word.lower()

Test_word=input("Enter any new word using the same alphabets in word to test your friendship:")
Test_word.lower()
def count_in_dict(word):
	count={}
	list_1=list(word)
	
	n=len(list_1)
	for i in range(n):
		if list_1[i] in count:
			count[list_1[i]] +=1
		else:
			count[list_1[i]]=1
	return count

def user_input():
    if count_in_dict(word) !=count_in_dict(Test_word):
        print("The letters aren't exact,friendship is fake")
        return
    ans=input("Does the word makes any sense?(y/Y or n/N)")

    if ans=='y' or ans=='Y':
        print("The Friends have passed the test successfully")
    elif ans=='n' or ans=='N':
        print("The word is not having meaning and your friendship is fake")
    else:
        print("Invalid input, you can try again with y/Y or n/N")
        user_input()
user_input()

